name: üîç Validar Templates da Organiza√ß√£o

on:
  push:
    branches: [main]
    paths:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
  pull_request:
    branches: [main]
    paths:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'

jobs:
  validate-templates:
    name: üìã Validar Templates
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üîç Validar sintaxe YAML dos templates
        run: |
          echo "üîç Verificando sintaxe dos templates YAML..."

          # Verificar se existem arquivos YAML para validar
          if ls .github/ISSUE_TEMPLATE/*.yml 1> /dev/null 2>&1; then
            for file in .github/ISSUE_TEMPLATE/*.yml; do
              echo "Validando: $file"
              python -c "
          import yaml
          import sys
          try:
              with open('$file', 'r', encoding='utf-8') as f:
                  yaml.safe_load(f)
              print('‚úÖ $file - Sintaxe v√°lida')
          except yaml.YAMLError as e:
              print('‚ùå $file - Erro de sintaxe:', e)
              sys.exit(1)
          except Exception as e:
              print('‚ùå $file - Erro:', e)
              sys.exit(1)
              "
            done
          else
            echo "‚ÑπÔ∏è Nenhum template YAML encontrado"
          fi

      - name: üìù Verificar template de PR
        run: |
          echo "üìù Verificando template de Pull Request..."

          if [ -f ".github/pull_request_template.md" ]; then
            echo "‚úÖ Template de PR encontrado"
            
            # Verificar se cont√©m se√ß√µes essenciais
            if grep -q "## üìã Descri√ß√£o" .github/pull_request_template.md; then
              echo "‚úÖ Se√ß√£o de descri√ß√£o encontrada"
            else
              echo "‚ùå Se√ß√£o de descri√ß√£o n√£o encontrada"
              exit 1
            fi
            
            if grep -q "Como Testar" .github/pull_request_template.md; then
              echo "‚úÖ Se√ß√£o de testes encontrada"
            else
              echo "‚ùå Se√ß√£o de testes n√£o encontrada"
              exit 1
            fi
            
          else
            echo "‚ùå Template de PR n√£o encontrado"
            exit 1
          fi

      - name: üèõÔ∏è Verificar conte√∫do espec√≠fico da ANPD
        run: |
          echo "üèõÔ∏è Verificando refer√™ncias espec√≠ficas da ANPD..."

          # Verificar se os templates mencionam contexto da ANPD
          grep_count=0

          if grep -r "ANPD\|LGPD\|Prote√ß√£o de Dados" .github/ISSUE_TEMPLATE/ || \
             grep "ANPD\|LGPD\|Prote√ß√£o de Dados" .github/pull_request_template.md; then
            echo "‚úÖ Refer√™ncias √† ANPD/LGPD encontradas"
            grep_count=$((grep_count + 1))
          fi

          if grep -r "desenvolvimento@anpd.gov.br\|ddss@anpd.gov.br" .github/; then
            echo "‚úÖ Contatos da ANPD encontrados"
            grep_count=$((grep_count + 1))
          fi

          if [ $grep_count -lt 1 ]; then
            echo "‚ö†Ô∏è Poucos elementos espec√≠ficos da ANPD encontrados"
          else
            echo "‚úÖ Conte√∫do espec√≠fico da ANPD verificado"
          fi

  validate-links:
    name: üîó Validar Links Internos
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üîó Verificar links para arquivos locais
        run: |
          echo "üîó Verificando links internos..."

          # Lista de arquivos que podem conter links
          files_to_check=(
            ".github/ISSUE_TEMPLATE/*.yml"
            ".github/pull_request_template.md"
            ".github/profile/README.md"
            ".github/profile/CONTRIBUTING.md"
          )

          errors=0

          for pattern in "${files_to_check[@]}"; do
            for file in $pattern; do
              if [ -f "$file" ]; then
                echo "Verificando links em: $file"
                
                # Extrair links para arquivos .md locais
                links=$(grep -o '\[.*\]([^)]*\.md)' "$file" | sed 's/.*(\([^)]*\)).*/\1/' || true)
                
                for link in $links; do
                  # Remover √¢ncoras (#section)
                  clean_link=$(echo "$link" | sed 's/#.*//')
                  
                  # Construir caminho absoluto
                  if [[ "$clean_link" == ../* ]]; then
                    # Link relativo subindo diret√≥rio
                    target_file=".github/$(echo "$clean_link" | sed 's|^\.\./||')"
                  elif [[ "$clean_link" == /* ]]; then
                    # Link absoluto
                    target_file=".$clean_link"
                  else
                    # Link relativo no mesmo diret√≥rio
                    dir=$(dirname "$file")
                    target_file="$dir/$clean_link"
                  fi
                  
                  if [ -f "$target_file" ]; then
                    echo "  ‚úÖ $link -> $target_file"
                  else
                    echo "  ‚ùå $link -> $target_file (n√£o encontrado)"
                    errors=$((errors + 1))
                  fi
                done
              fi
            done
          done

          if [ $errors -gt 0 ]; then
            echo "‚ùå $errors link(s) quebrado(s) encontrado(s)"
            exit 1
          else
            echo "‚úÖ Todos os links internos est√£o funcionando"
          fi

  security-check:
    name: üîê Verifica√ß√£o de Seguran√ßa
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üîê Verificar pol√≠ticas de seguran√ßa
        run: |
          echo "üîê Verificando pol√≠ticas de seguran√ßa..."

          # Verificar se SECURITY.md existe
          if [ -f ".github/profile/SECURITY.md" ]; then
            echo "‚úÖ SECURITY.md encontrado"
            
            # Verificar se cont√©m informa√ß√µes essenciais
            if grep -q "ddss@anpd.gov.br" .github/profile/SECURITY.md; then
              echo "‚úÖ Contato de seguran√ßa encontrado"
            else
              echo "‚ùå Contato de seguran√ßa n√£o encontrado"
              exit 1
            fi
            
          else
            echo "‚ùå SECURITY.md n√£o encontrado"
            exit 1
          fi

          # Verificar se CODE_OF_CONDUCT.md existe
          if [ -f ".github/profile/CODE_OF_CONDUCT.md" ]; then
            echo "‚úÖ CODE_OF_CONDUCT.md encontrado"
          else
            echo "‚ùå CODE_OF_CONDUCT.md n√£o encontrado"
            exit 1
          fi
